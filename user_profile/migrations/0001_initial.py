# Generated by Django 3.2.8 on 2022-07-28 14:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('resume', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('display_name', models.CharField(max_length=100, verbose_name='Name')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='Title')),
                ('title_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='Title')),
                ('title_pt_br', models.CharField(blank=True, max_length=100, null=True, verbose_name='Title')),
                ('contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Contact email')),
                ('contact_phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'.", regex='^\\+?1?\\d{9,15}$')])),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('website', models.URLField(blank=True, max_length=256, verbose_name='Website')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('picture', models.ImageField(blank=True, upload_to='profile_pictures/', verbose_name='Profile picture')),
                ('summary', models.TextField(blank=True, verbose_name='Summary')),
                ('summary_en', models.TextField(blank=True, null=True, verbose_name='Summary')),
                ('summary_pt_br', models.TextField(blank=True, null=True, verbose_name='Summary')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, verbose_name='Username or link')),
                ('link', models.URLField(blank=True, verbose_name='Link')),
                ('socialmedia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resume.socialmedia', verbose_name='Social media')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User profile')),
            ],
            options={
                'verbose_name': "User's social media link",
                'verbose_name_plural': "User's social media links",
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(choices=[(0, 'Novice'), (1, 'Beginner'), (2, 'Competent'), (3, 'Proficient'), (4, 'Expert')], default=2, verbose_name='Proficiency level')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resume.skill', verbose_name='Skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User profile')),
            ],
            options={
                'verbose_name': "users' skill",
                'verbose_name_plural': "users' skills",
            },
        ),
        migrations.CreateModel(
            name='PortfolioEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('title_en', models.CharField(max_length=100, null=True, verbose_name='Title')),
                ('title_pt_br', models.CharField(max_length=100, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_pt_br', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('cover', models.ImageField(blank=True, upload_to='portfolioentries', verbose_name='Cover image')),
                ('link', models.URLField(blank=True, verbose_name='Link')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('type', models.IntegerField(blank=True, choices=[(0, 'Side project'), (1, 'Client project'), (2, 'Product'), (3, 'Publication'), (4, 'POC')], null=True, verbose_name='Entry type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User profile')),
            ],
            options={
                'verbose_name': 'Portfolio',
                'verbose_name_plural': 'portfolio entries',
            },
        ),
        migrations.CreateModel(
            name='JobExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='Description')),
                ('description_en', models.TextField(null=True, verbose_name='Description')),
                ('description_pt_br', models.TextField(null=True, verbose_name='Description')),
                ('location', models.CharField(max_length=100, verbose_name='Location')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End date')),
                ('company', models.CharField(max_length=100, verbose_name='Company')),
                ('role', models.CharField(max_length=100, verbose_name='Role')),
                ('role_en', models.CharField(max_length=100, null=True, verbose_name='Role')),
                ('role_pt_br', models.CharField(max_length=100, null=True, verbose_name='Role')),
                ('skills_applied', models.ManyToManyField(blank=True, to='user_profile.UserSkill', verbose_name='Skills applied')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User profile')),
            ],
            options={
                'verbose_name': 'Job experience',
                'verbose_name_plural': 'Job experiences',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('name_en', models.CharField(max_length=100, null=True, verbose_name='Name')),
                ('name_pt_br', models.CharField(max_length=100, null=True, verbose_name='Name')),
                ('link', models.URLField(blank=True, verbose_name='Certificate link')),
                ('file', models.FileField(blank=True, upload_to='storage/portfolio', verbose_name='Certificate file')),
                ('skill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='resume.skill', verbose_name='Skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User profile')),
            ],
            options={
                'verbose_name': 'certificate',
                'verbose_name_plural': 'certificates',
            },
        ),
        migrations.CreateModel(
            name='AcademicExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='Description')),
                ('description_en', models.TextField(null=True, verbose_name='Description')),
                ('description_pt_br', models.TextField(null=True, verbose_name='Description')),
                ('location', models.CharField(max_length=100, verbose_name='Location')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End date')),
                ('school', models.CharField(max_length=100, verbose_name='School')),
                ('course', models.CharField(max_length=100, verbose_name='Course')),
                ('course_en', models.CharField(max_length=100, null=True, verbose_name='Course')),
                ('course_pt_br', models.CharField(max_length=100, null=True, verbose_name='Course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User profile')),
            ],
            options={
                'verbose_name': 'Academic experience',
                'verbose_name_plural': 'Academic experiences',
                'ordering': ['-start_date'],
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='skill_set',
            field=models.ManyToManyField(blank=True, through='user_profile.UserSkill', to='resume.Skill', verbose_name='skills'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='socialmedia_set',
            field=models.ManyToManyField(blank=True, through='user_profile.UserSocialLink', to='resume.SocialMedia', verbose_name='Social media links'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
